/* Xor gate: out = (a and Not(b)) or (Not(a) and b)) */

-- CHIP Xor {
--     IN a, b;
--     OUT out;
--
--     PARTS:
--     Not (in=a, out=nota);
--     Not (in=b, out=notb);
--     And (a=a, b=notb, out=aAndNotb);
--     And (a=nota, b=b, out=notaAndb);
--     Or (a=aAndNotb, b=notaAndb, out=out);
-- }

-- CHIP Xor {
--     IN a, b;
--     OUT out;
--
--     PARTS:
--     Nand(a=a, b=a, out=nota);
--     Nand(a=b, b=b, out=notb);
--     Nand(a=nota, b=b, out=notaNAndB);
--     Nand(a=a, b=notb, out=aNAndNotb);
--     Nand(a=notaNAndB, b=notaNAndB, out=notaAndB);
--     Nand(a=aNAndNotb, b=aNAndNotb, out=aAndNotb);
--     Nand(a=notaAndB, b=notaAndB, out=temp1);
--     Nand(a=aAndNotb, b=aAndNotb, out=temp2);
--     Nand(a=temp1, b=temp2, out=out);
-- }

CHIP Xor {
    IN a, b;
    OUT out;

    PARTS:
    Nand(a=a, b=a, out=nota);
    Nand(a=b, b=b, out=notb);
    Nand(a=a, b=notb, out=aNandNotb);
    Nand(a=nota, b=b, out=notANandb);
    Nand(a=aNandNotb, b=notANandb, out=out);
}
-- Using only three gates
-- a xor b = (a+b)(a'+b') = (a+b)(ab)'
-- CHIP Xor {
--     IN a, b;
--     OUT out;
--
--     PARTS:
--         Nand(a=a, b=b, out=aNandB);
--         Or(a=a, b=b, out=aOrB);
--         And(a=aNandB, b=aOrB, out=out);
-- }
